<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\ctnb.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\ctnb.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Nov 29 19:55:03 2021
<BR><P>
<H3>Maximum Stack Usage =        952 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
manufacturer_at_func &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3e]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[26]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">BusFault_Handler</a><BR>
 <LI><a href="#[25]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">MemManage_Handler</a><BR>
 <LI><a href="#[27]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3e]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[41]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[42]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[39]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3a]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3c]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3d]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[54]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[43]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4c]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4b]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4e]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4d]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[55]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4f]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[50]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[58]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[2e]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[44]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[47]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[46]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[45]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[48]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[49]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4a]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[51]">USART1_IRQHandler</a> from app_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[52]">USART2_IRQHandler</a> from log_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[53]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[56]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3f]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[40]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[59]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[5d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[5b]">app_uart_timout_cb</a> from app_uart.o(i.app_uart_timout_cb) referenced from app_uart.o(i.USART1_IRQHandler)
 <LI><a href="#[11]">at_get_URC_result</a> from nb_thread.o(i.at_get_URC_result) referenced 2 times from nb_thread.o(.data)
 <LI><a href="#[c]">at_get_cmd</a> from nb_thread.o(i.at_get_cmd) referenced 2 times from nb_thread.o(.data)
 <LI><a href="#[10]">at_get_req_result</a> from nb_thread.o(i.at_get_req_result) referenced 2 times from nb_thread.o(.data)
 <LI><a href="#[5]">at_get_rsp</a> from nb_thread.o(i.at_get_rsp) referenced 14 times from bc28_thread.o(.data)
 <LI><a href="#[5]">at_get_rsp</a> from nb_thread.o(i.at_get_rsp) referenced from nb_thread.o(i.at_send)
 <LI><a href="#[6]">at_process_URC</a> from bc28_thread.o(i.at_process_URC) referenced 2 times from bc28_thread.o(.data)
 <LI><a href="#[f]">at_process_rsp</a> from nb_thread.o(i.at_process_rsp) referenced 2 times from nb_thread.o(.data)
 <LI><a href="#[7]">at_recv_data</a> from bc28_thread.o(i.at_recv_data) referenced 2 times from bc28_thread.o(.data)
 <LI><a href="#[d]">at_send</a> from nb_thread.o(i.at_send) referenced 2 times from nb_thread.o(.data)
 <LI><a href="#[8]">at_send_data</a> from bc28_thread.o(i.at_send_data) referenced 2 times from bc28_thread.o(.data)
 <LI><a href="#[4]">at_set_rsp</a> from nb_thread.o(i.at_set_rsp) referenced 24 times from bc28_thread.o(.data)
 <LI><a href="#[4]">at_set_rsp</a> from nb_thread.o(i.at_set_rsp) referenced from nb_thread.o(i.at_send)
 <LI><a href="#[1d]">bsp_cmd_func</a> from flexshelluser.o(i.bsp_cmd_func) referenced 8 times from flexshelluser.o(FlexShellSection)
 <LI><a href="#[1a]">clr_dis_func</a> from flexshellsys.o(i.clr_dis_func) referenced 2 times from flexshellsys.o(FlexShellSection)
 <LI><a href="#[14]">do_show_help</a> from flexshellsys.o(i.do_show_help) referenced 4 times from flexshellsys.o(FlexShellSection)
 <LI><a href="#[1e]">fifo_func</a> from flexshelluser.o(i.fifo_func) referenced 2 times from flexshelluser.o(FlexShellSection)
 <LI><a href="#[5c]">fputc</a> from app_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[20]">get_board_infor</a> from flexshelluser.o(i.get_board_infor) referenced 2 times from flexshelluser.o(FlexShellSection)
 <LI><a href="#[1c]">get_time</a> from flexshellsys.o(i.get_time) referenced 2 times from flexshellsys.o(FlexShellSection)
 <LI><a href="#[5a]">log_read</a> from tinylog.o(i.log_read) referenced from flexshell_port.o(i.FlexShell_port_init)
 <LI><a href="#[61]">log_uart_write</a> from log_uart.o(i.log_uart_write) referenced from log_uart.o(i.log_uart_init)
 <LI><a href="#[57]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1f]">manufacturer_at_func</a> from flexshelluser.o(i.manufacturer_at_func) referenced 2 times from flexshelluser.o(FlexShellSection)
 <LI><a href="#[21]">nb_module_infor</a> from flexshelluser.o(i.nb_module_infor) referenced 2 times from flexshelluser.o(FlexShellSection)
 <LI><a href="#[5e]">nb_timer_cb</a> from app_aep_profile.o(i.nb_timer_cb) referenced from app_aep_profile.o(i.aep_thread_init)
 <LI><a href="#[5f]">nb_warning_timer_cb</a> from app_aep_profile.o(i.nb_warning_timer_cb) referenced from app_aep_profile.o(i.aep_thread_init)
 <LI><a href="#[3]">process_thread_BC28_event_process</a> from bc28_thread.o(i.process_thread_BC28_event_process) referenced 2 times from bc28_thread.o(.data)
 <LI><a href="#[2]">process_thread_BC28_init_process</a> from bc28_thread.o(i.process_thread_BC28_init_process) referenced 2 times from bc28_thread.o(.data)
 <LI><a href="#[12]">process_thread_FlexShell_process</a> from flexshell_port.o(i.process_thread_FlexShell_process) referenced 2 times from flexshell_port.o(.data)
 <LI><a href="#[0]">process_thread_app_process</a> from app_aep_profile.o(i.process_thread_app_process) referenced 2 times from app_aep_profile.o(.data)
 <LI><a href="#[1]">process_thread_bsp_process</a> from bsp_thread.o(i.process_thread_bsp_process) referenced 2 times from bsp_thread.o(.data)
 <LI><a href="#[a]">process_thread_nb_init_process</a> from nb_thread.o(i.process_thread_nb_init_process) referenced 2 times from nb_thread.o(.data)
 <LI><a href="#[b]">process_thread_nb_recvdata_process</a> from nb_thread.o(i.process_thread_nb_recvdata_process) referenced 2 times from nb_thread.o(.data)
 <LI><a href="#[9]">process_thread_nb_rsp_process</a> from nb_thread.o(i.process_thread_nb_rsp_process) referenced 2 times from nb_thread.o(.data)
 <LI><a href="#[13]">process_thread_thread_timer_process</a> from os_soft_timer.o(i.process_thread_thread_timer_process) referenced 2 times from os_soft_timer.o(.data)
 <LI><a href="#[16]">ps_func</a> from flexshellsys.o(i.ps_func) referenced 2 times from flexshellsys.o(FlexShellSection)
 <LI><a href="#[e]">release_req</a> from nb_thread.o(i.release_req) referenced 2 times from nb_thread.o(.data)
 <LI><a href="#[19]">restart_func</a> from flexshellsys.o(i.restart_func) referenced 2 times from flexshellsys.o(FlexShellSection)
 <LI><a href="#[18]">resume_func</a> from flexshellsys.o(i.resume_func) referenced 2 times from flexshellsys.o(FlexShellSection)
 <LI><a href="#[60]">send_data_asy_callback</a> from app_aep_profile.o(i.send_data_asy_callback) referenced from app_aep_profile.o(i.aep_thread_init)
 <LI><a href="#[63]">send_data_syn_callback</a> from app_aep_profile.o(i.send_data_syn_callback) referenced from app_aep_profile.o(i.send_msg)
 <LI><a href="#[62]">send_timer_cb</a> from nb_thread.o(i.send_timer_cb) referenced from nb_thread.o(i.nb_thread_init)
 <LI><a href="#[1b]">set_timestamp</a> from flexshellsys.o(i.set_timestamp) referenced 2 times from flexshellsys.o(FlexShellSection)
 <LI><a href="#[17]">suspend_func</a> from flexshellsys.o(i.suspend_func) referenced 2 times from flexshellsys.o(FlexShellSection)
 <LI><a href="#[15]">sys_reset</a> from flexshellsys.o(i.sys_reset) referenced 2 times from flexshellsys.o(FlexShellSection)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[64]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[87]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[136]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[137]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[138]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[139]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[13a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[13b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[13c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
</UL>

<P><STRONG><a name="[67]"></a>localtime</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[68]"></a>asctime</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[66]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctime &rArr; asctime
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_read
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_split
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ths_data_CodeDataReport
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_humidity_report_CodeDataReport
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_report_CodeDataReport
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_report_CodeDataReport
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_ack_CodeCmdResponse
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_ack_CodeCmdResponse
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_ack_CodeCmdResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_ack_CodeCmdResponse
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_report_CodeDataReport
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_rsp_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shell_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_init
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[dd]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_split
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_rsp
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_rsp
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_event_process
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_data
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_URC
</UL>

<P><STRONG><a name="[e1]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_split
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_DecodeCmdDown
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_DecodeCmdDown
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_DecodeCmdDown
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_DecodeCmdDown
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacturer_at_func
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_func
</UL>

<P><STRONG><a name="[e4]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_thread_name
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_event_process
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_infor
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_cmd_func
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_suspend
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_func
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_func
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shell_cmd
</UL>

<P><STRONG><a name="[6c]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[70]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_func
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_cmd_func
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_func
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_func
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_func
</UL>

<P><STRONG><a name="[71]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timestamp
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
</UL>

<P><STRONG><a name="[b0]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Calibration
</UL>

<P><STRONG><a name="[141]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Calibration
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_cmd_func
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6e]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[143]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[73]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[65]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[144]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[145]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[146]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[81]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[80]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[147]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>BC28_thread_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bc28_thread.o(i.BC28_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = BC28_thread_init &rArr; os_event_set_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_set_event
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_create
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
</UL>

<P><STRONG><a name="[26]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>FlexShell_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flexshell.o(i.FlexShell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = FlexShell_init &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlexShell_port_init
</UL>

<P><STRONG><a name="[8e]"></a>FlexShell_port_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flexshell_port.o(i.FlexShell_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = FlexShell_port_init &rArr; thread_os_register &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_register
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlexShell_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_init
</UL>

<P><STRONG><a name="[8f]"></a>FlexShell_thread_handle</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flexshell.o(i.FlexShell_thread_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FlexShell_thread_handle &rArr; do_shell_cmd &rArr; t_strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shell_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_FlexShell_process
</UL>

<P><STRONG><a name="[91]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[9e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[125]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_value
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IR_value
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[92]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[93]"></a>HAL_I2C_Init</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 530 bytes, Stack size 64 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>

<P><STRONG><a name="[9a]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[94]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f1xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9f]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_MspInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a0]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_bsp_process
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reset
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[a6]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[95]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[a9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 750 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c3]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ab]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[aa]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ac]"></a>HAL_UART_MspInit</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, stm32f1xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
</UL>

<P><STRONG><a name="[ae]"></a>HTS221_Calibration</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, hts221.o(i.HTS221_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Calibration &rArr; I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_bsp_process
</UL>

<P><STRONG><a name="[b1]"></a>HTS221_GetHumidity</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, hts221.o(i.HTS221_GetHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_GetHumidity &rArr; I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_bsp_process
</UL>

<P><STRONG><a name="[b5]"></a>HTS221_GetTemperature</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, hts221.o(i.HTS221_GetTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_GetTemperature &rArr; I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_bsp_process
</UL>

<P><STRONG><a name="[b6]"></a>HTS221_who_am_i</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221.o(i.HTS221_who_am_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_who_am_i &rArr; I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[24]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>HexToStr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, aepservicecodes.o(i.HexToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ths_data_CodeDataReport
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_humidity_report_CodeDataReport
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_report_CodeDataReport
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_report_CodeDataReport
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_ack_CodeCmdResponse
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_ack_CodeCmdResponse
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_ack_CodeCmdResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_ack_CodeCmdResponse
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_report_CodeDataReport
</UL>

<P><STRONG><a name="[25]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>OSSemCreat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_sem.o(i.OSSemCreat))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_init
</UL>

<P><STRONG><a name="[124]"></a>OSSemPend</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_thread_timer_process
</UL>

<P><STRONG><a name="[132]"></a>OSSemPost</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_timer_tick
</UL>

<P><STRONG><a name="[2a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>StrToHex</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, aepservicecodes.o(i.StrToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_DecodeCmdDown
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_DecodeCmdDown
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_DecodeCmdDown
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_DecodeCmdDown
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[2b]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; thread_os_tick &rArr; thread_timer_tick &rArr; os_rt_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_tick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>SystemClock_Config</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
</UL>

<P><STRONG><a name="[51]"></a>USART1_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, app_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_IRQHandler &rArr; soft_timer_register
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART2_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, log_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[149]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[df]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacturer_at_func
</UL>

<P><STRONG><a name="[14a]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[14b]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[cd]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_data
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacturer_at_func
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_cmd_func
</UL>

<P><STRONG><a name="[14d]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[14e]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[14f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[150]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[151]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[152]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12d]"></a>aep_htonf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aepservicecodes.o(i.aep_htonf))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ths_data_CodeDataReport
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_humidity_report_CodeDataReport
</UL>

<P><STRONG><a name="[113]"></a>aep_htoni</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aepservicecodes.o(i.aep_htoni))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_report_CodeDataReport
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_ack_CodeCmdResponse
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_DecodeCmdDown
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_ack_CodeCmdResponse
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_DecodeCmdDown
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_ack_CodeCmdResponse
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_DecodeCmdDown
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_ack_CodeCmdResponse
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_DecodeCmdDown
</UL>

<P><STRONG><a name="[f5]"></a>aep_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aepservicecodes.o(i.aep_htons))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ths_data_CodeDataReport
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_humidity_report_CodeDataReport
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_report_CodeDataReport
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_report_CodeDataReport
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_ack_CodeCmdResponse
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_ack_CodeCmdResponse
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_ack_CodeCmdResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_ack_CodeCmdResponse
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_report_CodeDataReport
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[d3]"></a>aep_thread_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_aep_profile.o(i.aep_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = aep_thread_init &rArr; thread_os_register &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_register
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_register
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_register_syn_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_thread_init
</UL>

<P><STRONG><a name="[d5]"></a>app_thread_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, user_main.o(i.app_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = app_thread_init &rArr; nb_thread_init &rArr; app_uart_register_fifo &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_thread_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_thread_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_init
</UL>

<P><STRONG><a name="[d8]"></a>app_uart_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_uart.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_uart_init &rArr; uart_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[da]"></a>app_uart_register_fifo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_uart.o(i.app_uart_register_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = app_uart_register_fifo &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_thread_init
</UL>

<P><STRONG><a name="[120]"></a>at_get_CON_result</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bc28_thread.o(i.at_get_CON_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_get_CON_result
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
</UL>

<P><STRONG><a name="[5]"></a>at_get_rsp</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, nb_thread.o(i.at_get_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = at_get_rsp &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nb_thread.o(i.at_send)
<LI> bc28_thread.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>at_send_data</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nb_thread.o(i.at_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
</UL>

<P><STRONG><a name="[4]"></a>at_set_rsp</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nb_thread.o(i.at_set_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = at_set_rsp &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nb_thread.o(i.at_send)
<LI> bc28_thread.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>bsp_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = bsp_init &rArr; setStatus &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_who_am_i
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
</UL>

<P><STRONG><a name="[d6]"></a>bsp_thread_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_thread.o(i.bsp_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = bsp_thread_init &rArr; thread_os_register &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_register
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_thread_init
</UL>

<P><STRONG><a name="[e9]"></a>codeDataReportByIdentifierToStr</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, aepservicecodes.o(i.codeDataReportByIdentifierToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = codeDataReportByIdentifierToStr &rArr; info_report_CodeDataReport &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ths_data_CodeDataReport
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_humidity_report_CodeDataReport
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_report_CodeDataReport
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_report_CodeDataReport
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_ack_CodeCmdResponse
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_ack_CodeCmdResponse
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_ack_CodeCmdResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_ack_CodeCmdResponse
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_report_CodeDataReport
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_data
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
</UL>

<P><STRONG><a name="[f4]"></a>decodeCmdDownFromStr</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, aepservicecodes.o(i.decodeCmdDownFromStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = decodeCmdDownFromStr &rArr; report_period_set_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_DecodeCmdDown
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_DecodeCmdDown
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_DecodeCmdDown
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_DecodeCmdDown
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
</UL>

<P><STRONG><a name="[fb]"></a>decode_aep_data</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, app_aep_profile.o(i.decode_aep_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = decode_aep_data &rArr; send_msg &rArr; nb_send &rArr; os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_stop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_recvdata_process
</UL>

<P><STRONG><a name="[e8]"></a>delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[101]"></a>fifo_get</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_rsp_process
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_func
</UL>

<P><STRONG><a name="[100]"></a>fifo_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fifo.o(i.fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_thread_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_func
</UL>

<P><STRONG><a name="[db]"></a>fifo_put</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, fifo.o(i.fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_func
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_timout_cb
</UL>

<P><STRONG><a name="[5c]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_uart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[fe]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_syn_callback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
</UL>

<P><STRONG><a name="[e3]"></a>getStatus</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp.o(i.getStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getStatus &rArr; read_key_value
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hum_temp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_value
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IR_value
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_data
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_app_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_warning_timer_cb
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_cmd_func
</UL>

<P><STRONG><a name="[104]"></a>get_hum_temp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_thread.o(i.get_hum_temp))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
</UL>

<P><STRONG><a name="[126]"></a>get_thread</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, thread.o(i.get_thread))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_func
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_func
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_func
</UL>

<P><STRONG><a name="[107]"></a>get_thread_name</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, thread.o(i.get_thread_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_thread_name &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_func
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_func
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_func
</UL>

<P><STRONG><a name="[eb]"></a>info_report_CodeDataReport</STRONG> (Thumb, 414 bytes, Stack size 72 bytes, aepservicecodes.o(i.info_report_CodeDataReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = info_report_CodeDataReport &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[119]"></a>isLittleEndian</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, util.o(i.isLittleEndian))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[103]"></a>led_read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led.o(i.led_read))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
</UL>

<P><STRONG><a name="[10a]"></a>led_write</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, led.o(i.led_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatus
</UL>

<P><STRONG><a name="[5a]"></a>log_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tinylog.o(i.log_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = log_read &rArr; log_uart_read
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshell_port.o(i.FlexShell_port_init)
</UL>
<P><STRONG><a name="[10d]"></a>log_uart_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, log_uart.o(i.log_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = log_uart_init &rArr; log_uart_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
</UL>

<P><STRONG><a name="[10b]"></a>log_uart_read</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, log_uart.o(i.log_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = log_uart_read
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_read
</UL>

<P><STRONG><a name="[57]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = main &rArr; user_main &rArr; thread_os_start &rArr; thread_os_init &rArr; app_thread_init &rArr; nb_thread_init &rArr; app_uart_register_fifo &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f6]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ths_data_CodeDataReport
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_humidity_report_CodeDataReport
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal_report_CodeDataReport
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_report_CodeDataReport
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_period_set_ack_CodeCmdResponse
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_control_ack_CodeCmdResponse
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_led0_ack_CodeCmdResponse
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_control_ack_CodeCmdResponse
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info_report_CodeDataReport
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>

<P><STRONG><a name="[111]"></a>module_power_on</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp.o(i.module_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = module_power_on &rArr; delay_ms &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
</UL>

<P><STRONG><a name="[112]"></a>module_reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp.o(i.module_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = module_reset &rArr; delay_ms &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
</UL>

<P><STRONG><a name="[f7]"></a>motor_control_DecodeCmdDown</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aepservicecodes.o(i.motor_control_DecodeCmdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = motor_control_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[ec]"></a>motor_control_ack_CodeCmdResponse</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, aepservicecodes.o(i.motor_control_ack_CodeCmdResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = motor_control_ack_CodeCmdResponse &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[f8]"></a>motor_led0_DecodeCmdDown</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aepservicecodes.o(i.motor_led0_DecodeCmdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = motor_led0_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[ed]"></a>motor_led0_ack_CodeCmdResponse</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, aepservicecodes.o(i.motor_led0_ack_CodeCmdResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = motor_led0_ack_CodeCmdResponse &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[102]"></a>motor_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(i.motor_read))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
</UL>

<P><STRONG><a name="[114]"></a>motor_write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, motor.o(i.motor_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = motor_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatus
</UL>

<P><STRONG><a name="[d4]"></a>nb_register_syn_ack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nb_thread.o(i.nb_register_syn_ack))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_thread_init
</UL>

<P><STRONG><a name="[115]"></a>nb_send</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, nb_thread.o(i.nb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = nb_send &rArr; os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post_event
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
</UL>

<P><STRONG><a name="[122]"></a>nb_syn_process</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nb_thread.o(i.nb_syn_process))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
</UL>

<P><STRONG><a name="[d7]"></a>nb_thread_init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, nb_thread.o(i.nb_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = nb_thread_init &rArr; app_uart_register_fifo &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_register_fifo
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_set_event
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_create
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_register
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_register
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_thread_init
</UL>

<P><STRONG><a name="[8a]"></a>os_event_create</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_event.o(i.os_event_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = os_event_create &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC28_thread_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_thread_init
</UL>

<P><STRONG><a name="[117]"></a>os_event_pend_event</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_event.o(i.os_event_pend_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = os_event_pend_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_recvdata_process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_event_process
</UL>

<P><STRONG><a name="[de]"></a>os_event_post_event</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, os_event.o(i.os_event_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_rsp
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_URC
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send
</UL>

<P><STRONG><a name="[8b]"></a>os_event_set_event</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_event.o(i.os_event_set_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = os_event_set_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC28_thread_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_thread_init
</UL>

<P><STRONG><a name="[108]"></a>os_time_get_timetick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_time.o(i.os_time_get_timetick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_rsp_process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_bsp_process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_start
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_app_process
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timestamp
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_FlexShell_process
</UL>

<P><STRONG><a name="[128]"></a>os_time_set_timetick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_time.o(i.os_time_set_timetick))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timestamp
</UL>

<P><STRONG><a name="[130]"></a>os_time_tick_handle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_time.o(i.os_time_tick_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_time_tick_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_tick
</UL>

<P><STRONG><a name="[118]"></a>platform_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = platform_init &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
</UL>

<P><STRONG><a name="[11a]"></a>print_all_reg</STRONG> (Thumb, 632 bytes, Stack size 24 bytes, hts221.o(i.print_all_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = print_all_reg &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_bsp_process
</UL>

<P><STRONG><a name="[106]"></a>read_IR_value</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp.o(i.read_IR_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_IR_value
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
</UL>

<P><STRONG><a name="[105]"></a>read_key_value</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(i.read_key_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_key_value
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
</UL>

<P><STRONG><a name="[f9]"></a>report_control_DecodeCmdDown</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aepservicecodes.o(i.report_control_DecodeCmdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = report_control_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[ee]"></a>report_control_ack_CodeCmdResponse</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, aepservicecodes.o(i.report_control_ack_CodeCmdResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = report_control_ack_CodeCmdResponse &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[fa]"></a>report_period_set_DecodeCmdDown</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aepservicecodes.o(i.report_period_set_DecodeCmdDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = report_period_set_DecodeCmdDown &rArr; StrToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeCmdDownFromStr
</UL>

<P><STRONG><a name="[ef]"></a>report_period_set_ack_CodeCmdResponse</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, aepservicecodes.o(i.report_period_set_ack_CodeCmdResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = report_period_set_ack_CodeCmdResponse &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[f0]"></a>sensor_report_CodeDataReport</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, aepservicecodes.o(i.sensor_report_CodeDataReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sensor_report_CodeDataReport &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[e5]"></a>setStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp.o(i.setStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = setStatus &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_write
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_bsp_process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_app_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_warning_timer_cb
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_cmd_func
</UL>

<P><STRONG><a name="[123]"></a>shell_split</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, util.o(i.shell_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = shell_split &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_rsp_process
</UL>

<P><STRONG><a name="[f1]"></a>signal_report_CodeDataReport</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, aepservicecodes.o(i.signal_report_CodeDataReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = signal_report_CodeDataReport &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htoni
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[129]"></a>soft_timer_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_soft_timer.o(i.soft_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = soft_timer_init &rArr; thread_os_register &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_register
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreat
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_init
</UL>

<P><STRONG><a name="[c6]"></a>soft_timer_register</STRONG> (Thumb, 280 bytes, Stack size 20 bytes, os_soft_timer.o(i.soft_timer_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = soft_timer_register
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_thread_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_thread_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>soft_timer_start</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_soft_timer.o(i.soft_timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_warning_timer_cb
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>soft_timer_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_soft_timer.o(i.soft_timer_stop))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_app_process
</UL>

<P><STRONG><a name="[ff]"></a>t_strtok</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, util.o(i.t_strtok))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = t_strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_use_targe
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_shell_cmd
</UL>

<P><STRONG><a name="[f2]"></a>temperature_humidity_report_CodeDataReport</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, aepservicecodes.o(i.temperature_humidity_report_CodeDataReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = temperature_humidity_report_CodeDataReport &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htonf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[11c]"></a>thread_os_delete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread.o(i.thread_os_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = thread_os_delete &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
</UL>

<P><STRONG><a name="[89]"></a>thread_os_register</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, thread.o(i.thread_os_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = thread_os_register &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC28_thread_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_thread_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_thread_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_thread_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlexShell_port_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_init
</UL>

<P><STRONG><a name="[11b]"></a>thread_os_restart</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, thread.o(i.thread_os_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = thread_os_restart &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_event_process
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_func
</UL>

<P><STRONG><a name="[127]"></a>thread_os_resume</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, thread.o(i.thread_os_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = thread_os_resume &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_func
</UL>

<P><STRONG><a name="[12f]"></a>thread_os_start</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, os_core.o(i.thread_os_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = thread_os_start &rArr; thread_os_init &rArr; app_thread_init &rArr; nb_thread_init &rArr; app_uart_register_fifo &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_timetick
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_main
</UL>

<P><STRONG><a name="[12b]"></a>thread_os_suspend</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, thread.o(i.thread_os_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = thread_os_suspend &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_func
</UL>

<P><STRONG><a name="[c0]"></a>thread_os_tick</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_port.o(i.thread_os_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thread_os_tick &rArr; thread_timer_tick &rArr; os_rt_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_tick_handle
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[131]"></a>thread_timer_tick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_soft_timer.o(i.thread_timer_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = thread_timer_tick &rArr; os_rt_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rt_timer_tick
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_tick
</UL>

<P><STRONG><a name="[f3]"></a>ths_data_CodeDataReport</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, aepservicecodes.o(i.ths_data_CodeDataReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ths_data_CodeDataReport &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htons
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_htonf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
</UL>

<P><STRONG><a name="[8c]"></a>ty_printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, tinyprintf.o(i.ty_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_register_fifo
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_rsp_process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_rsp
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_req_result
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_URC_result
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_restart
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_delete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_set_event
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post_event
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_pend_event
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_create
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC28_thread_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_URC
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_reg
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_bsp_process
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_thread_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_thread_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_register
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aep_thread_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_syn_callback
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_asy_callback
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_app_process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_module_infor
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacturer_at_func
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_board_infor
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_func
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_cmd_func
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_suspend
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_resume
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suspend_func
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timestamp
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_func
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart_func
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_func
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_show_help
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlexShell_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_timout_cb
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_init
</UL>

<P><STRONG><a name="[10e]"></a>ty_printf_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tinyprintf.o(i.ty_printf_init))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
</UL>

<P><STRONG><a name="[134]"></a>ty_vprintf</STRONG> (Thumb, 408 bytes, Stack size 552 bytes, tinyprintf.o(i.ty_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>

<P><STRONG><a name="[110]"></a>user_main</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user_main.o(i.user_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = user_main &rArr; thread_os_start &rArr; thread_os_init &rArr; app_thread_init &rArr; nb_thread_init &rArr; app_uart_register_fifo &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5e]"></a>nb_timer_cb</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, app_aep_profile.o(i.nb_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = nb_timer_cb &rArr; send_msg &rArr; nb_send &rArr; os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_app_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_aep_profile.o(i.aep_thread_init)
</UL>
<P><STRONG><a name="[5f]"></a>nb_warning_timer_cb</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_aep_profile.o(i.nb_warning_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = nb_warning_timer_cb &rArr; setStatus &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_start
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_aep_profile.o(i.aep_thread_init)
</UL>
<P><STRONG><a name="[0]"></a>process_thread_app_process</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, app_aep_profile.o(i.process_thread_app_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = process_thread_app_process &rArr; nb_timer_cb &rArr; send_msg &rArr; nb_send &rArr; os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_stop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_timetick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_data
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_aep_profile.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>send_data_asy_callback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_aep_profile.o(i.send_data_asy_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = send_data_asy_callback &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_aep_profile.o(i.aep_thread_init)
</UL>
<P><STRONG><a name="[63]"></a>send_data_syn_callback</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, app_aep_profile.o(i.send_data_syn_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = send_data_syn_callback &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_aep_profile.o(i.send_msg)
</UL>
<P><STRONG><a name="[fc]"></a>send_msg</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, app_aep_profile.o(i.send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = send_msg &rArr; nb_send &rArr; os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_data
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_timer_cb
</UL>

<P><STRONG><a name="[11e]"></a>send_sensor_data</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_aep_profile.o(i.send_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = send_sensor_data &rArr; send_msg &rArr; nb_send &rArr; os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeDataReportByIdentifierToStr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_msg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_app_process
</UL>

<P><STRONG><a name="[1]"></a>process_thread_bsp_process</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, bsp_thread.o(i.process_thread_bsp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = process_thread_bsp_process &rArr; print_all_reg &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_reg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Calibration
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatus
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_timetick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_thread.o(.data)
</UL>
<P><STRONG><a name="[11d]"></a>at_config_recv_msg_indication</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bc28_thread.o(i.at_config_recv_msg_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_config_recv_msg_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_BC28_init_process
</UL>

<P><STRONG><a name="[6]"></a>at_process_URC</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, bc28_thread.o(i.at_process_URC))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_process_URC &rArr; os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post_event
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc28_thread.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>at_recv_data</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bc28_thread.o(i.at_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = at_recv_data &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc28_thread.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>at_send_data</STRONG> (Thumb, 84 bytes, Stack size 528 bytes, bc28_thread.o(i.at_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = at_send_data &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc28_thread.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>process_thread_BC28_event_process</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, bc28_thread.o(i.process_thread_BC28_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = process_thread_BC28_event_process &rArr; os_event_pend_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_restart
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_pend_event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc28_thread.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>process_thread_BC28_init_process</STRONG> (Thumb, 3190 bytes, Stack size 112 bytes, bc28_thread.o(i.process_thread_BC28_init_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = process_thread_BC28_init_process &rArr; thread_os_delete &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_restart
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_delete
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_pend_event
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_thread_name
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_config_recv_msg_indication
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_timetick
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bc28_thread.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>at_get_URC_result</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nb_thread.o(i.at_get_URC_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = at_get_URC_result &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_cmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>at_get_cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nb_thread.o(i.at_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_get_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_URC_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(.data)
</UL>
<P><STRONG><a name="[dc]"></a>at_get_req_cmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nb_thread.o(i.at_get_req_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_req
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process_rsp
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_req_result
</UL>

<P><STRONG><a name="[10]"></a>at_get_req_result</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nb_thread.o(i.at_get_req_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = at_get_req_result &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_req_cmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>at_process_rsp</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, nb_thread.o(i.at_process_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = at_process_rsp &rArr; os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_req_cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_post_event
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>at_send</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, nb_thread.o(i.at_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = at_send &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_cmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(.data)
</UL>
<P><STRONG><a name="[11f]"></a>module_cmd_table_init</STRONG> (Thumb, 106 bytes, Stack size 36 bytes, nb_thread.o(i.module_cmd_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = module_cmd_table_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_nb_init_process
</UL>

<P><STRONG><a name="[a]"></a>process_thread_nb_init_process</STRONG> (Thumb, 1952 bytes, Stack size 64 bytes, nb_thread.o(i.process_thread_nb_init_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = process_thread_nb_init_process &rArr; thread_os_delete &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_syn_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_data
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_cmd_table_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_restart
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_delete
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_pend_event
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_thread_name
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_CON_result
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC28_thread_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_stop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_timetick
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>process_thread_nb_recvdata_process</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nb_thread.o(i.process_thread_nb_recvdata_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = process_thread_nb_recvdata_process &rArr; decode_aep_data &rArr; send_msg &rArr; nb_send &rArr; os_event_post_event &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_event_pend_event
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_aep_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>process_thread_nb_rsp_process</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, nb_thread.o(i.process_thread_nb_rsp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = process_thread_nb_rsp_process &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_split
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_timetick
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>release_req</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nb_thread.o(i.release_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = release_req
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_req_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>send_timer_cb</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nb_thread.o(i.send_timer_cb))
<BR>[Address Reference Count : 1]<UL><LI> nb_thread.o(i.nb_thread_init)
</UL>
<P><STRONG><a name="[af]"></a>I2C_Read</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, hts221.o(i.I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_reg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Calibration
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_who_am_i
</UL>

<P><STRONG><a name="[b2]"></a>I2C_Write</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, hts221.o(i.I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2C_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_reg
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetTemperature
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_GetHumidity
</UL>

<P><STRONG><a name="[5b]"></a>app_uart_timout_cb</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_uart.o(i.app_uart_timout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = app_uart_timout_cb &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart.o(i.USART1_IRQHandler)
</UL>
<P><STRONG><a name="[d9]"></a>uart_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, app_uart.o(i.uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[10c]"></a>log_uart_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, log_uart.o(i.log_uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = log_uart_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_init
</UL>

<P><STRONG><a name="[61]"></a>log_uart_write</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, log_uart.o(i.log_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = log_uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_uart.o(i.log_uart_init)
</UL>
<P><STRONG><a name="[12c]"></a>find_use_targe</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, util.o(i.find_use_targe))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_strtok
</UL>

<P><STRONG><a name="[90]"></a>do_shell_cmd</STRONG> (Thumb, 96 bytes, Stack size 112 bytes, flexshell.o(i.do_shell_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = do_shell_cmd &rArr; t_strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_strtok
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlexShell_thread_handle
</UL>

<P><STRONG><a name="[12]"></a>process_thread_FlexShell_process</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, flexshell_port.o(i.process_thread_FlexShell_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = process_thread_FlexShell_process &rArr; FlexShell_thread_handle &rArr; do_shell_cmd &rArr; t_strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_timetick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlexShell_thread_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshell_port.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>clr_dis_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flexshellsys.o(i.clr_dis_func))
<BR>[Address Reference Count : 1]<UL><LI> flexshellsys.o(FlexShellSection)
</UL>
<P><STRONG><a name="[14]"></a>do_show_help</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flexshellsys.o(i.do_show_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = do_show_help &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshellsys.o(FlexShellSection)
</UL>
<P><STRONG><a name="[1c]"></a>get_time</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, flexshellsys.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = get_time &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_timetick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshellsys.o(FlexShellSection)
</UL>
<P><STRONG><a name="[16]"></a>ps_func</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, flexshellsys.o(i.ps_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ps_func &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshellsys.o(FlexShellSection)
</UL>
<P><STRONG><a name="[19]"></a>restart_func</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, flexshellsys.o(i.restart_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = restart_func &rArr; thread_os_restart &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_restart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_thread_name
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_thread
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshellsys.o(FlexShellSection)
</UL>
<P><STRONG><a name="[18]"></a>resume_func</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, flexshellsys.o(i.resume_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = resume_func &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_thread_name
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_resume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_thread
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshellsys.o(FlexShellSection)
</UL>
<P><STRONG><a name="[1b]"></a>set_timestamp</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, flexshellsys.o(i.set_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = set_timestamp &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_get_timetick
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_time_set_timetick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshellsys.o(FlexShellSection)
</UL>
<P><STRONG><a name="[17]"></a>suspend_func</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flexshellsys.o(i.suspend_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = suspend_func &rArr; thread_os_suspend &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_thread_name
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_suspend
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_thread
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshellsys.o(FlexShellSection)
</UL>
<P><STRONG><a name="[15]"></a>sys_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flexshellsys.o(i.sys_reset))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshellsys.o(FlexShellSection)
</UL>
<P><STRONG><a name="[1d]"></a>bsp_cmd_func</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, flexshelluser.o(i.bsp_cmd_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = bsp_cmd_func &rArr; setStatus &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshelluser.o(FlexShellSection)
</UL>
<P><STRONG><a name="[1e]"></a>fifo_func</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, flexshelluser.o(i.fifo_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = fifo_func &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshelluser.o(FlexShellSection)
</UL>
<P><STRONG><a name="[20]"></a>get_board_infor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flexshelluser.o(i.get_board_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = get_board_infor &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshelluser.o(FlexShellSection)
</UL>
<P><STRONG><a name="[1f]"></a>manufacturer_at_func</STRONG> (Thumb, 146 bytes, Stack size 280 bytes, flexshelluser.o(i.manufacturer_at_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = manufacturer_at_func &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshelluser.o(FlexShellSection)
</UL>
<P><STRONG><a name="[21]"></a>nb_module_infor</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, flexshelluser.o(i.nb_module_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = nb_module_infor &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flexshelluser.o(FlexShellSection)
</UL>
<P><STRONG><a name="[c8]"></a>_PrintInt</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, tinyprintf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_vprintf
</UL>

<P><STRONG><a name="[ca]"></a>_PrintUnsigned</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, tinyprintf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_vprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[c9]"></a>_StoreChar</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tinyprintf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_vprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[12e]"></a>thread_os_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(i.thread_os_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = thread_os_init &rArr; app_thread_init &rArr; nb_thread_init &rArr; app_uart_register_fifo &rArr; ty_printf &rArr; ty_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_thread_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ty_printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlexShell_port_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_os_start
</UL>

<P><STRONG><a name="[133]"></a>os_rt_timer_tick</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_soft_timer.o(i.os_rt_timer_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_rt_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_timer_tick
</UL>

<P><STRONG><a name="[13]"></a>process_thread_thread_timer_process</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, os_soft_timer.o(i.process_thread_thread_timer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = process_thread_thread_timer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_soft_timer.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b9]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[98]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[9b]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[9d]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[97]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[b8]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[99]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[9c]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[ba]"></a>MX_GPIO_Init</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>MX_I2C1_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[cc]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[d1]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d0]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
